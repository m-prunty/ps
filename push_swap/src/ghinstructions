/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   instruction.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: shovsepy <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/07/09 18:33:22 by shovsepy          #+#    #+#             */
/*   Updated: 2021/07/09 18:33:23 by shovsepy         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

// Swaps first two elements of a stack | sa and sb

/*/
int	swap(dl_list **stack)
{
	dl_list	*head;
	dl_list	*next;
	int		tmp_val;
	int		tmp_idx;

	if (ft_lstsize(*stack) < 2)
		return (-1);
	head = *stack;
	next = head->next;
	if (!head && !next)
		ft_error("Error occured while swapping!");
	tmp_val = head->i;
	tmp_idx = head->idx;
	head->i = next->i;
	head->idx = next->idx;
	next->i = tmp_val;
	next->idx = tmp_idx;
	return (0);
}

/*/
int	sa(dl_list **stack_a)
{
	if (swap(stack_a) == -1)
		return (-1);
	ft_putendl_fd("sa", 1);
	return (0);
}

int	sb(dl_list **stack_b)
{
	if (swap(stack_b) == -1)
		return (-1);
	ft_putendl_fd("sb", 1);
	return (0);
}

int	ss(dl_list **stack_a, dl_list **stack_b)
{	
	if ((*get_size(stack_a) < 2) || (*get_size(stack_b) < 2))
		return (-1);
	swap(stack_a);
	swap(stack_b);
	ft_putendl_fd("ss", 1);
	return (0);
}

// Takes the first element of one stack and puts it at the top of another | pa and pb

/*/
int	push(dl_list **stack_to, dl_list **stack_from)
{
	dl_list	*tmp;
	dl_list	*head_to;
	dl_list	*head_from;

	if (ft_lstsize(*stack_from) == 0)
		return (-1);
	head_to = *stack_to;
	head_from = *stack_from;
	tmp = head_from;
	head_from = head_from->next;
	*stack_from = head_from;
	if (!head_to)
	{
		head_to = tmp;
		head_to->next = NULL;
		*stack_to = head_to;
	}
	else
	{
		tmp->next = head_to;
		*stack_to = tmp;
	}
	return (0);
}

/*/
int	pa(dl_list **stack_a, dl_list **stack_b)
{
	if (push(stack_a, stack_b) == -1)
		return (-1);
	ft_putendl_fd("pa", 1);
	return (0);
}

int	pb(dl_list **stack_a, dl_list **stack_b)
{
	if (push(stack_b, stack_a) == -1)
		return (-1);
	ft_putendl_fd("pb", 1);
	return (0);
}

// Shift up all elements of a stack by 1. The first element becomes the last one | ra and rb
/*/
int	rotate(dl_list **stack)
{
	dl_list	*head;
	dl_list	*tail;

	if (ft_lstsize(*stack) < 2)
		return (-1);
	head = *stack;
	tail = ft_lstlast(head);
	*stack = head->next;
	head->next = NULL;
	tail->next = head;
	return (0);
}

/*/
int	ra(dl_list **stack_a)
{
	if (rotate(stack_a, 1) == -1)
		return (-1);
	ft_putendl_fd("ra", 1);
	return (0);
}

int	rb(dl_list **stack_b)
{
	if (rotate(stack_b, 1) == -1)
		return (-1);
	ft_putendl_fd("rb", 1);
	return (0);
}

int	rr(dl_list **stack_a, dl_list **stack_b)
{
	if ((*get_size(stack_a) < 2) || (*get_size(stack_b) < 2))
		return (-1);
	rotate(stack_a, 1);
	rotate(stack_b, 1);
	ft_putendl_fd("rr", 1);
	return (0);
}


// Shifts down all elements of a stack by 1. The last element becomes the first one | rra and rrb

/*/
int	reverseRotate(dl_list **stack)
{
	dl_list	*head;
	dl_list	*tail;

	if (ft_lstsize(*stack) < 2)
		return (-1);
	head = *stack;
	tail = ft_lstlast(head);
	while (head)
	{
		if (head->next->next == NULL)
		{
			 head->next = NULL;
			 break ;
		}
		head = head->next;
	}
	tail->next = *stack;
	*stack = tail;
	return (0);
}

/*/
int	rra(dl_list **stack_a)
{
	if (rotate(stack_a, -1) == -1)
		return (-1);
	ft_putendl_fd("rra", 1);
	return (0);
}

int	rrb(dl_list **stack_b)
{
	if (rotate(stack_b, -1) == -1)
		return (-1);
	ft_putendl_fd("rrb", 1);
	return (0);
}

int	rrr(dl_list **stack_a, dl_list **stack_b)
{
	if ((*get_size(stack_a) < 2) || (*get_size(stack_b) < 2))
		return (-1);
	rotate(stack_a,-1);
	rotate(stack_b,-1);
	ft_putendl_fd("rrr", 1);
	return (0);
}

